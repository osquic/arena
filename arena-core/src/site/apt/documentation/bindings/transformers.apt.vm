 -----
 Uqbar Project
 -----
 ${project.name}
 -----


Transformers

 <<Transformer[M, V]>> defines how to convert and validate values from view to model and viceversa (because Arena has a two-way binding). 

 * <<M viewToModel(V valueFromView)>>: converts a value from the UI component to the model format
 * <<V modelToView(M valueFromModel)>>: converts a value from the model to the UI format
 * <<Class<M> getModelType():>> returns class type of model
 * <<Class<V> getViewType()>>: returns class type of view
 

Date Adapter

 * Implements Transforme[Date, String]
 
 * Converts a string in a <dd/MM/yyy> format to Date and viceversa
 
 * Allows null values
 
 []
 
* Example 

 A textbox with a binding to a dateOfBirth property of a customer. 
 
+-- 
new TextBox(it) => [
   width = 80
   bindValueToProperty("dateOfBirth").transformer = new DateAdapter
] 
+--

NotEmptyTransformer

 * located in package org.uqbar.lacar.ui.model.adapter
 
 * implements Transformer[String, Boolean]
 
 * maps a String object with a boolean value <true> (string is empty or null) / <false> (string is not empty or null)
 
 []
 


NotNullTransformer

 * located in package org.uqbar.lacar.ui.model.adapter
 
 * implements Transformer[Object, Boolean]

 * maps any object with a boolean value <true> (object is not null) / false (object is null)
 
 []
 
 
What do you need to define a new Transformer

 * Find concrete classes for M and V 
 
 * Implement a Transformer for this concrete classes M and V
 
 * Define getModelType() and getViewType() methods. They should return concrete classes.
 
 * In viewToModel() method you define how to convert a view value to its model
 
 * In modelToView() method you define how to convert a value model to its view


* Example: BigDecimalTransformer

+--
class BigDecimalTransformer implements Transformer<BigDecimal, String> {
  
   override getModelType() {
       BigDecimal
   }

   override getViewType() {
       String
   }

   override modelToView(BigDecimal valueFromModel) {
       valueFromModel.toString
   }

   override viewToModel(String valueFromView) {
       if (valueFromView == "")
          null
       else
          try
              new BigDecimal(valueFromView)
          catch (NumberFormatException e)
              throw new UserException("You must enter a number", e)
   }
   
}
+--

